@model Online_Exam.Models.ViewModels.QuestionViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Questions</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Question, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Question, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
        </div>
    </div>

    @for (int i = 0; i < 4; i++)
    {
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Options[i].Option, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Options[i].Option, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Options[i].Option, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Options[i].IsAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        Yes:   @Html.RadioButtonFor(model => model.Options[i].IsAnswer, true)
                        No: @Html.RadioButtonFor(model => model.Options[i].IsAnswer, false, new { @checked = "checked" })
                        @Html.ValidationMessageFor(model => model.Options[i].IsAnswer, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    }

    @*<div class="form-group">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[0].Option, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Options[0].Option, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Options[0].Option, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[0].IsAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    Yes:   @Html.RadioButtonFor(model => model.Options[0].IsAnswer, true)
                    No: @Html.RadioButtonFor(model => model.Options[0].IsAnswer, false, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.Options[0].IsAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>*@

    @*<div class="form-group">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[1].Option, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Options[1].Option, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Options[1].Option, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[1].IsAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    Yes:   @Html.RadioButtonFor(model => model.Options[1].IsAnswer, true)
                    No: @Html.RadioButtonFor(model => model.Options[1].IsAnswer, false, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.Options[1].IsAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>*@

    @*<div class="form-group">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[2].Option, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Options[2].Option, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Options[2].Option, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[2].IsAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    Yes:   @Html.RadioButtonFor(model => model.Options[2].IsAnswer, true)
                    No: @Html.RadioButtonFor(model => model.Options[2].IsAnswer, false, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.Options[2].IsAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>*@

    @*<div class="form-group">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[3].Option, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Options[3].Option, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Options[3].Option, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.Options[3].IsAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    Yes:   @Html.RadioButtonFor(model => model.Options[3].IsAnswer, true)
                    No: @Html.RadioButtonFor(model => model.Options[3].IsAnswer, false, new { @checked = "checked" })
                    @Html.ValidationMessageFor(model => model.Options[3].IsAnswer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
