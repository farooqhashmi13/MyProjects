@model IEnumerable<OnlineExam.Models.ViewModels.ExamViewModel>


<link href="~/css/exam.css" rel="stylesheet" />

<div class="jumbotron-fluid bg-info p-5 text-light">
    <div class="row">
        <div class="col-md-4">
            <div class="card border-light bg-transparent">
                <div class="card-body">
                    <h6>Subject:<span class="float-right">@Model.First().Subject</span></h6>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-light bg-transparent">
                <div class="card-body">
                    <h6>Total Questions:<span class="float-right">@Model.Count()</span></h6>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card border-light bg-transparent">
                <div class="card-body">
                    <h6>Time:<span id="timer" class="d-none float-right">15m</span></h6>
                </div>
            </div>
        </div>
    </div>
    
    
    <button class="btn btn-outline-light" onclick="startExam(this)">Start Now</button>
    
</div>

<div id="regForm" action="/exam/start" class=" position-relative d-none">
    @*<h1>Register:</h1>*@
    <!-- One "tab" for each step in the form: -->
    @foreach (var item in Model)
    {
        <div class="tab">

            <h5><strong>Q#@item.QuestionNo: </strong> @item.Question.Quest</h5><hr />

            @foreach (var option in item.Options)
            {
                <label class="divcontainer">
                    @option.Opt
                    <input type="radio" id="customRadio-@option.Id" name="radio-option-@item.QuestionNo" value=@option.Id data-question-id="@item.Question.Id">
                    <span class="checkmark"></span>
                </label>
            }

        </div>
    }
    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)" class="btn btn-info">Previous</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)" class="btn btn-primary">Next</button>
            <button type="button" id="submit" onclick="finishExam()" class="btn btn-primary d-none">Finish</button>
        </div>
    </div>
    <div class="progress">
        <div class="progress-bar bg-info" role="progressbar"></div>
    </div>

</div>

<input type="hidden" value="@Model.First().ExamCategory" id="exam-category"/>

@section Scripts{
    <script type="text/javascript">

        var countDownTime;
        var currentTab = 0; // Current tab is set to be the first tab (0)
        showTab(currentTab); // Display the current tab

        function setProgressBar(n) {
            var percentage = 100 * n / @Model.Count();
            $('.progress-bar').css('width', '' + percentage + '%');
        }

        function showTab(n) {
            // This function will display the specified tab of the form...
            var x = document.getElementsByClassName("tab");
            x[n].style.display = "block";
            //... and fix the Previous/Next buttons:
            if (n == 0) {
                document.getElementById("prevBtn").style.display = "none";
                //document.getElementById("submit").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
                //document.getElementById("submit").style.display = "inline";
            }
            if (n == (x.length - 1)) {
                $('#nextBtn').addClass('d-none');
                $('#submit').removeClass('d-none');
            } else {
                $('#nextBtn').removeClass('d-none');
                $('#submit').addClass('d-none');
            }
            setProgressBar(n+1);
        }

        function nextPrev(n) {
            // This function will figure out which tab to display
            var x = document.getElementsByClassName("tab");
            // Hide the current tab:
            x[currentTab].style.display = "none";
            // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;
            // if you have reached the end of the form...
            if (currentTab >= x.length) {
                // ... the form gets submitted:
                document.getElementById("regForm").submit();
                return false;
            }
            // Otherwise, display the correct tab:
            showTab(currentTab);
        }

        function finishExam() {

            var formObj = [];

            $('input[type=radio]:checked').each(function (i, item) {
                formObj.push({
                    'questionId': $(this).data('question-id'),
                    'selectedOptionId': $(this).val()
                });
            });

            if (!@User.Identity.IsAuthenticated.ToString().ToLower()) {
                $('.login-modal').toggle();
                return;
            }

            $.ajax({
                'url': '/exam/finish',
                'method': 'Post',
                'data': { 'data': formObj, 'totalQuestions': @Model.Count() },
                'success': function (res) {
                    if (res.success) {
                        window.location.href = "/exam/result";
                    }
                }
            });
        }

        function startExam(btn) {
            $(btn).addClass('d-none');
            $('#regForm').removeClass('d-none');

            var examCategory = $('#exam-category').val();

            if (examCategory == 'short') {
                countDownTime = new Date().getTime() + 15 * 60 * 1000;
            }
            else if (examCategory == 'medium') {
                countDownTime = new Date().getTime() + 50 * 60 * 1000;
            }
            else {
                countDownTime = new Date().getTime() + 100 * 60 * 1000;
            }

            $('#timer').removeClass('d-none');

        }

        // Update the count down every 1 second
        var x = setInterval(function () {
            

            // Get today's date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownTime - now;
            //var distance = countDownTime;

            // Time calculations for days, hours, minutes and seconds
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Display the result in the element with id="demo"
            document.getElementById("timer").innerHTML = hours != 0 ? hours + "h "
                + minutes + "m " + seconds + "s " : minutes + "m " + seconds + "s ";

            // If the count down is finished, write some text
            if (distance < 0) {
                clearInterval(x);
                document.getElementById("timer").innerHTML = "EXPIRED";
            }
        }, 1000);


    </script>
}
